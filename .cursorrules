<meta_prompt>

# Project Instructions

Here is the project description and optimal architecture explanation in English:

---

## General Project Description

We are creating a web application that automates the writing of social media posts (Threads, Telegram, Yandex.Dzen, etc.) based on pre-made prompts. The main task is to take user input (the “inputs”), construct a final prompt that includes both the user input and system prompts, send the prompt to chosen LLMs (ChatGPT, Claude, Gemini, etc.), and display the results in the UI (the “outputs”).

### Overall Flow

1. **User inputs data (the “Inputs”)**:
   - **Reference post**: A base post (text) that serves as a model for the final post.
   - **Info**: Additional information that helps produce a more suitable/interesting text.
   - **Checkboxes/Switches**: For selecting which model(s) to use (ChatGPT, Claude, Gemini, etc.), as well as other options (tone, style, length, etc.).
   - Additional placeholders for future enhancements (e.g., specifying a required post length, certain keywords, etc.).

2. **Constructing the final prompt**:
   - Based on the user inputs.
   - Combined with any “system” prompts or service-level instructions (tone, style, structure).
   - These system instructions can be kept in a separate config file or in a database.

3. **Sending prompts to the LLMs**:
   - The final prompt is sent to ChatGPT, Claude, Gemini, etc., depending on which models the user chooses.
   - This can be handled via a server-side approach in Node.js (Next.js server actions or an API route).
   - Alternatively (as you mentioned), Puppeteer will be used first. Puppeteer emulates a browser session for platforms lacking an official API.

4. **Receiving and displaying the responses**:
   - Each model’s reply is captured and displayed in separate “Outputs” fields.
   - For the MVP/initial version, we can have three output fields: “ChatGPT Output,” “Claude Output,” and “Gemini Output,” for example.

5. **Optional**: Logging or saving the input and output in a database (Supabase/PostgreSQL) so that you can later analyze or reuse them.

---

## Tech Stack

1. **Next.js (App Router)**:
   - Provides a convenient framework for building UI and routing.
   - Server Components + Server Actions fit well for interacting with external APIs (LLMs) and databases.
   
2. **Tailwind CSS + shadcn/ui**:
   - Tailwind CSS for modular styling.
   - shadcn/ui for quickly building your interface (buttons, forms, icons, etc.).

3. **Supabase (PostgreSQL)**:
   - Store your data (e.g., user logs, system prompts, etc.).
   - Potentially handle authentication if needed.
   - Can be paired with Drizzle ORM for type-safe database access.

4. **Clerk (Auth)** (Optional):
   - If multiple users or private access is needed, Clerk simplifies user authentication.

5. **Stripe (Payments)** (Optional):
   - For payment functionality or subscriptions if you plan to monetize.

6. **Deployment: Vercel**:
   - Optimal for Next.js deployments.
   - Environment variables for LLM provider APIs are managed in Vercel settings.

---

## Architecture and Main Modules

### 1. User Interface (UI Layer)
- Within the `app` folder, we might have a page (e.g., `app/page.tsx`) containing two main blocks:
  - **Inputs**: Form fields, checkboxes, etc. This will be a client component managing state.
  - **Outputs**: Displays the results returned from the server for each selected model. This will also be a client component, showing results received from the server.

- We can break components into smaller files:
  - `app/_components/inputs-form.tsx` — the inputs form.
  - `app/_components/outputs-section.tsx` — the outputs section.
  - `app/page.tsx` — composes everything into one page.

### 2. API Layer (Server Actions / or API Routes)
- When the inputs form is submitted, it calls a server action (or an API route) such as `POST /api/generate`.
- This function:
  1. Receives the data from the client (reference post, info, model preferences).
  2. Constructs the final prompt(s).
  3. Sends a prompt to each chosen model (ChatGPT, Claude, etc.)—whether through Puppeteer or an API.
  4. Collects all the responses and returns them to the client.

- If you’re using **Server Actions**, your code might look like:
  ```ts
  // app/_actions/generate-actions.ts

  "use server"
  import { doRequestToChatGPT, doRequestToClaude } from "@/lib/llm-requests";

  export async function generatePostsAction(inputData: GeneratePostsInput) {
    const chatGPTResp = await doRequestToChatGPT(inputData);
    const claudeResp = await doRequestToClaude(inputData);
    // ...
    return { chatGPTResp, claudeResp /*, ...*/ };
  }
  ```
- If you want to log or save data to your Supabase database, you can do that here via Drizzle ORM.

### 3. LLM Integration Layer
- In a file like `lib/llm-requests.ts` or `lib/llm-clients/`, define functions:
  - `doRequestToChatGPT(prompt)`
  - `doRequestToClaude(prompt)`
  - `doRequestToGemini(prompt)`
- These functions handle:
  - Either direct HTTP calls to official APIs
  - Or Puppeteer scripts if only a web interface is available
  - Error handling, rate limiting, etc.

### 4. Database (Supabase + Drizzle ORM)
- This is where you store:
  - Request–response logs
  - System prompts, templates, presets
- Example schema might have:
  - **posts** (or **requests**):
    - `id`
    - `user_id`
    - `reference_post`
    - `info`
    - ...
    - `created_at`
    - `updated_at`
  - **responses**:
    - `id`
    - `post_id` (FK to posts.id)
    - `model` (chatgpt, claude, gemini, etc.)
    - `output_text`
    - `created_at`
    - `updated_at`

### 5. Authentication (Clerk) [Optional]
- If restricting access to certain users, integrate `@clerk/nextjs`.
- In server components, validate the user with `auth()` from Clerk.

### 6. Deployment
- Deployed on Vercel:
  - Store environment variables (LLM API keys, etc.) in the Vercel project settings.
  - Connect to Supabase for the database.

---

## Summary

1. **Frontend**:
   - One page with an inputs form + an outputs block (React + Tailwind + shadcn/ui).
   - On submit, calls server actions or API routes.

2. **Backend**:
   - A server action (`generatePostsAction`) or an API endpoint (`/api/generate`) that constructs the prompt, sends requests to LLMs (via Puppeteer or direct API), and returns the results.
   - Optionally logs input and outputs to a database.

3. **LLM Integration**:
   - For the first version, Puppeteer might be used if the official APIs are not available.
   - Code for the LLM interactions is kept in a separate library module (`lib`).

4. **Database**:
   - Drizzle + Supabase (PostgreSQL) to store logs, request–response pairs, system prompts, etc.

5. **Deployment**:
   - Vercel hosts the Next.js project.
   - Supabase hosts the PostgreSQL database.

This approach provides a “monolithic” Next.js application with both client- and server-side code, connected to a cloud database (Supabase). It’s straightforward to develop locally and then deploy with minimal friction, leveraging Vercel’s and Supabase’s integrations.

## Project Structure

### General Structure

- `actions` - Server actions
  - `db` - Database related actions
  - Other actions
- `app` - Next.js app router
  - `api` - API routes
  - `route` - An example route (each of these are only if needed)
    - `_components` - One-off components for the route
    - `layout.tsx` - Layout for the route
    - `page.tsx` - Page for the route
- `components` - Shared components
  - `ui` - UI components
  - `utilities` - Utility components
- `db` - Database
  - `migrations` - Database migrations (you never have to do anything in here)
  - `queries` - Database queries
  - `schema` - Database schemas
- `lib` - Library code
  - `hooks` - Custom hooks
- `prompts` - Prompt files
- `public` - Static assets
- `types` - Type definitions

### Project Specific Structure

## Rules

Follow these rules when building the project.

### General Rules

- Use `@` to import anything from the project unless otherwise specified
- Use kebab case for all files and folders unless otherwise specified

#### Env Rules

- If you update environment variables, update the `.env.example` file
- All environment variables should go in `.env.local`
- Do not expose environment variables to the frontend
- Use `NEXT_PUBLIC_` prefix for environment variables that need to be accessed from the frontend
- You may import environment variables in server actions and components by using `process.env.VARIABLE_NAME`

#### Type Rules

Follow these rules when working with types.

- When importing types, use `@/types`
- Name files like `example-types.ts`
- All types should go in `types`
- Make sure to export the types in `types/index.ts`
- Prefer interfaces over type aliases
- If referring to db types, use `@/db/schema` such as `SelectTodo` from `todos-schema.ts`

An example of a type:

`types/actions-types.ts`

```ts
export type ActionState<T> = {
  isSuccess: boolean
  message: string
  data?: T
}
```

And exporting it:

`types/index.ts`

```ts
export * from "./actions-types"
```

### Frontend Rules

Follow these rules when working on the frontend.

It uses Next.js, Tailwind, Shadcn, and Framer Motion.

#### General Rules

- Use `lucide-react` for icons

#### Components

- Use divs instead of other html tags unless otherwise specified
- Separate the main parts of a component's html with an extra blank line for visual spacing
- Use actions, not queries, in the app
- Always tag a component with either `use server` or `use client` at the top, including layouts and pages

##### Organization

- All components be named using kebab case like `example-component.tsx` unless otherwise specified
- Put components in `/_components` in the route if one-off components
- Put components in `/components` from the root if shared components

##### Data Fetching

- Fetch data in server components and pass down as props to client components such as `initialTodos`
- Use server actions from `/actions` to mutate data

##### Server Components

- Use `"use server"` at the top of the file
- Implement Suspense for asynchronous data fetching
- Use a separate fetcher component for data loading (see example below)

Example of a server page:

```tsx
"use server"

import { Suspense } from "react"
import { SomeAction } from "@/actions/some-actions"
import SomeComponent from "./_components/some-component"
import SomeSkeleton from "./_components/some-skeleton"

export default async function ExampleServerPage({
  params
}: {
  params: { id: string }
}) {
  return (
    <Suspense fallback={<SomeSkeleton className="some-class" />}>
      <SomeComponentFetcher id={params.id} />
    </Suspense>
  )
}

async function SomeComponentFetcher({ id }: { id: string }) {
  const { data } = await SomeAction(id)

  <SomeComponent className="some-class" initialData={data || []} id={id} />
}
```

Example of a server component:

```tsx
"use server"

interface ExampleServerComponentProps {
  // Your props here
}

export async function ExampleServerComponent({
  props
}: ExampleServerComponentProps) {
  // Your code here
}
```

##### Client Components

- Use `"use client"` at the top of the file

Example of a client page:

```tsx
"use client"

export default function ExampleClientPage() {
  // Your code here
}
```

Example of a client component:

```tsx
"use client"

interface ExampleClientComponentProps {
  // Your props here
}

export default function ExampleClientComponent({
  props
}: ExampleClientComponentProps) {
  // Your code here
}
```

### Backend Rules

Follow these rules when working on the backend.

It uses Postgres, Supabase, Drizzle ORM, and Server Actions.

#### General Rules

- Never generate migrations. You do not have to do anything in the `db/migrations` folder inluding migrations and metadata. Ignore it.

#### Organization

#### Schemas

- When importing schemas, use `@/db/schema`
- Name files like `example-schema.ts`
- All schemas should go in `db/schema`
- Make sure to export the schema in `db/schema/index.ts`
- Make sure to add the schema to the `schema` object in `db/db.ts`
- If using a userId, always use `userId: text("user_id").notNull()`
- Always include createdAt and updatedAt columns in all tables
- Make sure to cascade delete when necessary
- Use enums for columns that have a limited set of possible values such as:

```ts
import { pgEnum } from "drizzle-orm/pg-core"

export const membershipEnum = pgEnum("membership", ["free", "pro"])

membership: membershipEnum("membership").notNull().default("free")
```

Example of a schema:

`db/schema/todos-schema.ts`

```ts
import { boolean, pgTable, text, timestamp, uuid } from "drizzle-orm/pg-core"

export const todosTable = pgTable("todos", {
  id: uuid("id").defaultRandom().primaryKey(),
  userId: text("user_id").notNull(),
  content: text("content").notNull(),
  completed: boolean("completed").default(false).notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at")
    .defaultNow()
    .notNull()
    .$onUpdate(() => new Date())
})

export type InsertTodo = typeof todosTable.$inferInsert
export type SelectTodo = typeof todosTable.$inferSelect
```

And exporting it:

`db/schema/index.ts`

```ts
export * from "./todos-schema"
```

And adding it to the schema in `db/db.ts`:

`db/db.ts`

```ts
import { todosTable } from "@/db/schema"

const schema = {
  todos: todosTable
}
```

And a more complex schema:

```ts
import { pgTable, text, timestamp, uuid } from "drizzle-orm/pg-core"

export const chatsTable = pgTable("chats", {
  id: uuid("id").defaultRandom().primaryKey(),
  userId: text("user_id").notNull(),
  name: text("name").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at")
    .defaultNow()
    .notNull()
    .$onUpdate(() => new Date())
})

export type InsertChat = typeof chatsTable.$inferInsert
export type SelectChat = typeof chatsTable.$inferSelect
```

```ts
import { pgEnum, pgTable, text, timestamp, uuid } from "drizzle-orm/pg-core"
import { chatsTable } from "./chats-schema"

export const roleEnum = pgEnum("role", ["assistant", "user"])

export const messagesTable = pgTable("messages", {
  id: uuid("id").defaultRandom().primaryKey(),
  chatId: uuid("chat_id")
    .references(() => chatsTable.id, { onDelete: "cascade" })
    .notNull(),
  content: text("content").notNull(),
  role: roleEnum("role").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at")
    .defaultNow()
    .notNull()
    .$onUpdate(() => new Date())
})

export type InsertMessage = typeof messagesTable.$inferInsert
export type SelectMessage = typeof messagesTable.$inferSelect
```

And exporting it:

`db/schema/index.ts`

```ts
export * from "./chats-schema"
export * from "./messages-schema"
```

And adding it to the schema in `db/db.ts`:

`db/db.ts`

```ts
import { chatsTable, messagesTable } from "@/db/schema"

const schema = {
  chats: chatsTable,
  messages: messagesTable
}
```

#### Queries

- When importing queries, use `@/db/queries`
- Name files like `example-queries.ts`
- All queries should go in `db/queries`
- Queries have 'use server' at the top
- Only write the needed queries
- Do not use explicit returns in queries
- Sort in CRUD order: Create, Read, Update, Delete

Example of a query:

`db/queries/todos-queries.ts`

```ts
"use server"

import { db } from "@/db/db"
import { InsertTodo, todosTable } from "@/db/schema"
import { eq } from "drizzle-orm"

export const createTodo = async (data: InsertTodo) => {
  try {
    const [newTodo] = await db.insert(todosTable).values(data).returning()
    return newTodo
  } catch (error) {
    console.error("Error creating todo:", error)
    throw new Error("Failed to create todo")
  }
}

export const getTodos = async (userId: string) => {
  try {
    return db.query.todos.findMany({
      where: eq(todosTable.userId, userId)
    })
  } catch (error) {
    console.error("Error getting todos:", error)
    throw new Error("Failed to get todos")
  }
}
```

#### Server Actions

- When importing actions, use `@/actions` or `@/actions/db` if db related
- DB related actions should go in the `actions/db` folder
- Other actions should go in the `actions` folder
- Name files like `example-actions.ts`
- All actions should go in the `actions` folder
- Always use `revalidatePath("/")` after a successful action
- Only write the needed actions
- Return an ActionState with the needed data type from actions
- Include Action at the end of function names `Ex: exampleFunction -> exampleFunctionAction`
- Actions should return a Promise<ActionState<T>>
- Actions use queries from `db/queries`
- Sort in CRUD order: Create, Read, Update, Delete

```ts
export type ActionState<T> = {
  isSuccess: boolean
  message: string
  data?: T
}
```

Example of an action:

`actions/db/todos-actions.ts`

```ts
"use server"

import { createTodo, getTodos } from "@/db/queries/todos-queries"
import { InsertTodo, SelectTodo } from "@/db/schema/todos-schema"
import { ActionState } from "@/types"
import { revalidatePath } from "next/cache"

export async function createTodoAction(
  todo: InsertTodo
): Promise<ActionState<SelectTodo>> {
  try {
    const newTodo = await createTodo(todo)
    revalidatePath("/")
    return {
      isSuccess: true,
      message: "Todo created successfully",
      data: newTodo
    }
  } catch (error) {
    console.error("Error creating todo:", error)
    return { isSuccess: false, message: "Failed to create todo" }
  }
}

export async function getTodosAction(
  userId: string
): Promise<ActionState<SelectTodo[]>> {
  try {
    const todos = await getTodos(userId)
    return {
      isSuccess: true,
      message: "Todos retrieved successfully",
      data: todos
    }
  } catch (error) {
    console.error("Error getting todos:", error)
    return { isSuccess: false, message: "Failed to get todos" }
  }
}
```

### Auth Rules

Follow these rules when working on auth.

It uses Clerk for authentication.

#### General Rules

- Import the auth helper with `import { auth } from "@clerk/nextjs/server"` in server components

### Payments Rules

Follow these rules when working on payments.

It uses Stripe for payments.

</meta_prompt>